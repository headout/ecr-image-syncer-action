name: "ECR Image Syncer Action"
description: "Checks if the given image exists in ECR, and if not builds and pushes to ECR registry"
inputs:
  aws-access-id:
    description: "AWS access ID"
    required: true
  aws-secret-key:
    description: "AWS Secret key"
    required: true
  aws-region:
    description: "AWS Region"
    required: false
    default: ""
  aws-ecr-registry:
    description: "ECR Registry ID"
    required: false
  image-repo:
    description: "Repository of Target image"
    required: true
  image-tag:
    description: "Tag of Target image"
    required: true
  pre-build-command:
    description: "Bash command to run before docker build"
    required: false
  dockerfile:
    description: "Path to Dockerfile to build"
    required: true
  docker-build-args:
    description: "Args to use for docker build"
    required: false
  image-cache:
    description: "Image cache to use when building"
    required: false
  do-update-cache:
    description: "Whether action should update the image cache after build"
    required: false
    default: "false"
  cache-registry:
    description: "Registry to use when updating the cache"
    required: false
  cache-registry-username:
    description: "Username to login docker to cache-registry"
    required: false
  cache-registry-password:
    description: "Password to login docker to cache-registry"
    required: false
outputs:
  found:
    description: "Whether given image was found in ECR (true/false)"
runs:
  using: "docker"
  image: "Dockerfile"
  args:
    - ${{ inputs.aws-access-id }}
    - ${{ inputs.aws-secret-key }}
    - ${{ inputs.aws-region }}
    - ${{ inputs.aws-ecr-registry }}
    - ${{ inputs.image-repo }}
    - ${{ inputs.image-tag }}
    - ${{ inputs.pre-build-command }}
    - ${{ inputs.dockerfile }}
    - ${{ inputs.docker-build-args }}
    - ${{ inputs.image-cache }}
    - ${{ inputs.do-update-cache }}
    - ${{ inputs.cache-registry }}
    - ${{ inputs.cache-registry-username }}
    - ${{ inputs.cache-registry-password }}
